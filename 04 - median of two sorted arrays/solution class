class Solution {
public:
	
	double getKth( vector<int>::iterator a,int m,vector<int>::iterator b,int n,int k)
	{
		if(m > n) return getKth(b, n, a, m, k);//first version I forgot to return this kind of situation
		if(m == 0) return b[k-1];
		if(k == 1) return min(a[0],b[0]);
		int pa = min( k/2 , m ); int pb = k-pa;
		
		if(a[pa-1] < b[pb-1])
			return getKth(a+pa, m-pa, b, n, k-pa);
		else if(a[pa-1] > b[pb-1])
			return getKth(a, m, b+pb, n-pb, k-pb);
		else return a[pa-1];
	}
	
	double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		size_t m = nums1.size();
		size_t n = nums2.size();
		//Before this line, I deal with a kind of special situation.
		//And below this, I will try to deal with the normal situation.
		//As the item asked, I have to control the time complexity under O(log(m+n))
		//So this item should be solved with Binary Search.
		
		//And second version I found my calculate() will bring me compile error
		if( (m+n) % 2 )
			return getKth(nums1.begin(), m, nums2.begin(), n, (m+n)/2+1 );
		else return (getKth(nums1.begin(), m, nums2.begin(), n, (m+n)/2 )+getKth(nums1.begin(), m, nums2.begin(), n, (m+n)/2+1 ))/2.0;
		//so this is the final version
	}
};
